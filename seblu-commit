#!/bin/bash

# Copyright © Sébastien Luttringer
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

dbname='seblu'
repo="/srv/ftp/archlinux/$dbname"
repo_32="$repo/i686"
repo_64="$repo/x86_64"

# packages to add
declare -a to_32 to_64

[[ -r /etc/makepkg.conf ]] && source /etc/makepkg.conf
[[ -r "$HOME/.makepkg.conf" ]]  && source "$HOME/.makepkg.conf"

shopt -s nullglob

msg() {
	printf "\e[1;32m==>\e[0;1m $1\e[m\n" "${@:1}"
}

msg2() {
	printf "\e[1;34m  ->\e[0;1m $1\e[m\n" "${@:1}"
}

# usage : in_array( $needle, $haystack )
# return : 0 - found
#          1 - not found
in_array() {
	local needle=$1; shift
	local item
	for item in "$@"; do
	   [[ $item = $needle ]] && return 0 # Found
	done
	return 1 # Not Found
}

# $1: srouce
# $2: destination
cp_acl() {
	rm -f "$2"
	touch "$2"
	cat < "$1" > "$2"
}

source_pkgbuild() {
	[[ ! -f PKGBUILD ]] && echo 'No PKGBUILD' && exit 1
	source PKGBUILD

	[[ $(type -t pkgver) == 'function' ]] && pkgver=$(pkgver)

	for _pkgname in "${pkgname[@]}"; do
		# define filename base
		# handle epoch which is optional
		filebase="$_pkgname-"
		[[ -n $epoch ]] && (( $epoch > 0 )) && filebase+="$epoch:"
		filebase+="$pkgver-$pkgrel"

		# add any pkg in both repo
		filename="$filebase-any$PKGEXT"
		if [[ -f "$filename" ]]; then
			# register
			to_32+=("$filename")
			to_64+=("$filename")
		fi

		# add i686 repo
		filename="$filebase-i686$PKGEXT"
		if [[ -f "$filename" ]]; then
			to_32+=("$filename")
		fi

		# add x86_64 repo
		filename="$filebase-x86_64$PKGEXT"
		if [[ -f "$filename" ]]; then
			to_64+=("$filename")
		fi
	done
}

sign_pkg() {
	msg 'Sign packages'
	for _pkg; do
		if [[ ! -f "$_pkg.sig" ]]; then
			msg2 "Signing $_pkg"
			gpg --detach-sign "$_pkg" || exit 1
		fi
	done
}

# add pkg ($2..$n) in argument into repo $1
add_pkg() {
	(( $# > 1 )) || return
	local repo="$1"
	shift
	msg "Adding packages into $repo"
	# copy files
	for _pkg; do
		msg2 "Copying $_pkg"
		cp_acl "$_pkg" "$repo/$_pkg" || exit 2
		cp_acl "$_pkg.sig" "$repo/$_pkg.sig" || exit 2
		rm "$_pkg" "$_pkg.sig"
	done
	# update db
	pushd "$repo" >/dev/null
	msg2 "Updating $repo db"
	repo-add -q -s "$dbname.db.tar.gz" "$@"
	msg2 "Updating $repo file db"
	repo-add -q -s -f "$dbname.files.tar.gz" "$@"
	popd >/dev/null
}

# if packages are on command line add them, otherwise look in PKGBUILD
if (( $# > 0 )); then
	for _pkg; do
		case "$_pkg" in
			*-i686$PKGEXT) to_32+=("$_pkg");;
			*-x86_64$PKGEXT) to_64+=("$_pkg");;
			*-any$PKGEXT) to_32+=("$_pkg"); to_64+=("$_pkg");;
		esac
	done
else
	source_pkgbuild
fi

if (( ${#to_32[@]} + ${#to_64[@]} == 0 )); then
	echo 'No package to add' >&2
	exit 2
fi

sign_pkg "${to_32[@]}" "${to_64[@]}"

# add i686 packages
add_pkg "$repo_32" "${to_32[@]}"

# add x86_64 packages
add_pkg "$repo_64" "${to_64[@]}"

# vim:set ts=2 sw=2 ft=sh noet:
